#lang racket
;problem 1(a)
(display "Problem 1.(a)")
(newline)
(define prev
  (let ((contain 'first-call))
    (lambda (ele)
      (let ((prev-ele contain))
        (begin
          (set! contain ele)
          prev-ele)))))
(prev 'a)
(prev 3)
(prev (+ 1 5))
(newline)

;problem 1(b)
(display "Problem 1.(b)")
(newline)
(define (make-prev init)
  (let ((contain init))
    (lambda (ele)
      (let ((prev-ele contain))
        (begin
          (set! contain ele)
          prev-ele)))))
(define Prev (make-prev 'first-call))
(Prev 'a)
(Prev 3)
(Prev (+ 1 5))
(newline)

;problem 2
(display "Problem 2")
(newline)
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (wrong-password m)
    (display "Incorrect password\n"))
  (define (dispatch input-password m)
    (if (eq? input-password password)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error "Unknown request -- MAKE-ACCOUNT"
                           m)))
        wrong-password))
  dispatch)
(define acc (make-account 100 '123456))
((acc '123456 'withdraw) 40)
((acc '654321 'deposit) 50)
(newline)

;problem 3
(display "Problem 3")
(newline)
(define f
  (lambda (first-value)
    (set! f (lambda (second-value) 0))
    first-value))
(+ (f 0) (f 1))
(newline)

;problem 4
(display "Problem 4")
(newline)
(define make-withdraw
  (lambda (initial-amount)
    ((lambda (balance)
       (lambda (amount)
         (if (>= balance amount)
             (begin (set! balance (- balance amount))
                    balance)
             "Insufficient funds")))
     initial-amount)))
(define w1 (make-withdraw 100))
(w1 50)
(define w2 (make-withdraw 100))
